<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boost | 乌衣巷]]></title>
  <link href="http://CodePeasant.github.io/blog/categories/boost/atom.xml" rel="self"/>
  <link href="http://CodePeasant.github.io/"/>
  <updated>2014-11-20T17:13:55+08:00</updated>
  <id>http://CodePeasant.github.io/</id>
  <author>
    <name><![CDATA[吴逸翔]]></name>
    <email><![CDATA[1032197148@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[智能指针笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/04/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-04T19:25:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/04/智能指针笔记</id>
    <content type="html"><![CDATA[<h2>std::auto_ptr</h2>

<h3>定义</h3>

<p>通过在析构函数里delete实现自动内存释放，实现大概50行代码以内</p>

<h3>TIP</h3>

<ul>
<li>一个原始指针只能有一个auto_ptr拥有其所有权</li>
<li>不支持值语义，赋值、拷贝操作之间转移所有权，原来的autor_ptr拥有一个空指针</li>
<li>不支持值语义所以不能放入STL容器中</li>
<li>使用delete所以不能传入数组指针</li>
</ul>


<h2>boost::scoped_ptr</h2>

<h3>TIP</h3>

<ul>
<li>实现原理与auto_ptr类似，不过不支持赋值、拷贝操作，其余类似</li>
<li>超出智能指针作用域利用析构自动delete故称为scoped，RAII</li>
</ul>


<h2>boost::scoped_array</h2>

<h3>TIP</h3>

<ul>
<li>实现与scoped_ptr一样，只不过是用delete[]来释放内存</li>
<li>一般用vector而不要用这个</li>
</ul>


<h2>boost::shared_ptr</h2>

<h3>定义</h3>

<p>引用计数指针可以分为intrusive和non-intrusive两种，shared_ptr是一种non-instrusive的引用计数智能指针。</p>

<h3>TIP</h3>

<ul>
<li>一个原始指针只能有可以有多个shared_ptr拥有其所有权</li>
<li>shared_ptr可以放入容器之中</li>
<li>类型转换必须用static_pointer_cast</li>
<li>删除器必须是一个实现了operator()的函数对象或者函数指针</li>
<li>删除器函数对象示例boost::shared_ptr<FILE> my_shared_file(f,FileCloser());</li>
<li>删除器函数指针示例boost::shared_ptr<FILE> my_shared_file(f,&amp;fclose);</li>
<li>使用enable_shared_from_this:因为shared_ptr(T<em>)会认为只有他拥有T</em>，故新建立一个引用计数，为0时进行一次delete；而share_ptr(weak_ptr&lt;T<em>>)沿用原有的weak_ptr计数+1；shared_from_this实际是share_ptr(weak_ptr&lt;T</em>>);故当有函数的参数是shared_ptr<T>的时候T应当继承enable_shared_from_this</li>
</ul>


<h2>boost::shared_array</h2>

<h3>TIP</h3>

<ul>
<li>实现与shared_ptr一样，只不过是用delete[]来释放内存</li>
<li>一般用一个指向vector的shared_ptr指针而不要用这个</li>
</ul>


<h2>boost::intrusive_ptr</h2>

<h3>定义</h3>

<p>intrusive的引用计数智能指针，需要用户自己维护一个引用计数，并重载intrusive_ptr_add_ref和instrusive_ptr_release函数</p>

<h3>TIP</h3>

<ul>
<li>直接可以使用this而不需要像share_ptr要用enable_shared_from_this</li>
<li>一般还是用shared_ptr</li>
<li>据说智能指针的大小必须与裸指针的大小相等时也要用instrusive_ptr</li>
</ul>


<h2>boost::weak_ptr</h2>

<h3>定义</h3>

<p>weak_ptr不增加引用计数</p>

<h3>TIP</h3>

<ul>
<li>可以观察资源并通过expired防止悬空指针</li>
<li>用于防止循环引用</li>
<li>生成shared_ptr:(1)通过构造函数构造(为空返回bad_weak_ptr);(2)通过lock方法(为空返回空shared_ptr)</li>
</ul>

]]></content>
  </entry>
  
</feed>
