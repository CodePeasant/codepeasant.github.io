<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS | 乌衣巷]]></title>
  <link href="http://CodePeasant.github.io/blog/categories/os/atom.xml" rel="self"/>
  <link href="http://CodePeasant.github.io/"/>
  <updated>2014-11-02T17:42:52+08:00</updated>
  <id>http://CodePeasant.github.io/</id>
  <author>
    <name><![CDATA[吴逸翔]]></name>
    <email><![CDATA[1032197148@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IO笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/12/IO%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-12T20:15:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/12/IO笔记</id>
    <content type="html"><![CDATA[<h2>Socket基本操作</h2>

<h3>TCP</h3>

<ul>
<li>Server:bind/listen/accept/read(write)/close</li>
<li>Client:bind/connect/read/write/close</li>
</ul>


<h3>UDP</h3>

<ul>
<li>Server:bind/sendto/recvfrom/close</li>
<li>Client:sendto/recvfrom/close</li>
</ul>


<h2>同步/异步/阻塞/非阻塞</h2>

<ul>
<li>同步 bool do();</li>
<li>异步 void do(); 事件:void onResult(bool result);[通知方式]</li>
<li>阻塞 直到数据就绪为止</li>
<li>非阻塞 不管数据有没有就绪直接返回</li>
<li>同步下区分阻塞和非阻塞，异步不区分，三种系统I/O:同步阻塞/同步非阻塞/异步非阻塞</li>
</ul>


<h2>Reactor/Proactor</h2>

<h3>组成元素</h3>

<ul>
<li>事件源(fd/socket)</li>
<li>事件多路分发机制(select/poll)</li>
<li>Reactor(事件注册/循环/回调/移除)</li>
<li>Event Handler(事件处理方法)</li>
</ul>


<h3>区别</h3>

<ul>
<li>reactor通知好的时候数据还没有写入缓冲区，需要自己去读写(同步)[libevent]</li>
<li>proactor通知好的时候操作系统已经把数据写入缓冲区，不需要自己去读写(异步)[asio]</li>
</ul>


<h3>Reference</h3>

<ul>
<li><a href="http://blog.csdn.net/sparkliang/article/details/4957744">libevent源码深度剖析</a></li>
<li><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio.html">boost.asio</a></li>
</ul>


<h1>select/poll/epoll/kqueue</h1>

<p>本质都是多路复用机制，select/poll都是轮询内核，epoll/kqueue采用中断信号回调</p>

<ul>
<li><p>select的缺点如下：</p>

<blockquote><ul>
<li>最大并发数（默认1024/2048）</li>
<li>效率（线性扫描，O(N)，活跃不活跃都要测试，大量不活跃的时候性能很差）</li>
<li>内核/用户空间（采用内存拷贝）</li>
</ul>
</blockquote></li>
<li><p>poll修正了最大并发数问题</p></li>
<li>epoll修正了最大并发数，效率（只跟活跃有关，O(k)），内核/用户空间（共享内存）</li>
<li>kqueue类似于epoll，不同平台的实现</li>
</ul>


<h2>边缘/水平触发</h2>

<ul>
<li>边缘触发(level)

<blockquote><p>每当状态变化时发生一个io事件；
有事了，告诉你一次，你不处理？拉倒！</p></blockquote></li>
<li>水平触发(edge)

<blockquote><p>只要满足条件就发生一个io事件；
有事了，你不处理？不断骚扰你直到你处理</p></blockquote></li>
</ul>


<h1>TCP/UDP</h1>

<ul>
<li>TCP要点有四，一曰有连接，二曰可靠传输，三曰数据按照到达，四曰端到端流量控制。</li>
<li>IP层提供的核心基本功能有两点，第一点是地址管理，第二点就是路由选路。</li>
<li>TCP3次握手,4次挥手用于保证双方都终止数据传输</li>
<li>UDP可以一个Client Socket连多个Server，TCP只能一对一</li>
</ul>

]]></content>
  </entry>
  
</feed>
