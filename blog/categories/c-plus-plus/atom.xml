<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | 乌衣巷]]></title>
  <link href="http://CodePeasant.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://CodePeasant.github.io/"/>
  <updated>2014-11-02T17:42:52+08:00</updated>
  <id>http://CodePeasant.github.io/</id>
  <author>
    <name><![CDATA[吴逸翔]]></name>
    <email><![CDATA[1032197148@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APUE笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/10/31/APUE%E7%AC%94%E8%AE%B0%28Chapter1%7E6%29/"/>
    <updated>2014-10-31T21:15:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/10/31/APUE笔记(Chapter1~6)</id>
    <content type="html"><![CDATA[<h1>APUE笔记</h1>

<h2>UNIX System Overview</h2>

<h3>Nonfatal error(man 3 errno)</h3>

<ul>
<li>EAGAIN/EWOULDBLOCK</li>
<li>ENFILE/ENOBUFS/ENOLCK/ENOSPC/ENOSR/ENOMEM/EBUSY</li>
</ul>


<h2>键盘信号</h2>

<ul>
<li>Ctrl+Z SIGTSTP</li>
<li>Ctrl+C SIGINT</li>
<li>Ctrl+D EOF</li>
<li>Ctrl+/ SIGQUIT</li>
</ul>


<h2>UNIX Standardization and Implementations</h2>

<ul>
<li>ISO C/POSIX/XSI</li>
<li>FreeBSD/Linux/MacOS/Solaris</li>
<li>gcc -D_POSIX_C_SOURCE=200112 file.c</li>
</ul>


<h2>File I/O</h2>

<h3>open/close</h3>

<ul>
<li>O_RDONLY/O_WRONLY/O_RDWR</li>
<li>O_APPEND/O_TRUNC/O_CREAT/O_EXCL/O_NONBLOCK</li>
<li>O_SYNC(write data&amp;attr)/O_DSYNC(write data)/O_RSYNC(read)</li>
<li>sync(all)/fsync(single)/fdatasync</li>
</ul>


<h3>read/write</h3>

<h3>lseek</h3>

<ul>
<li>SEEK_CUR/SEEK_SET/SEEK_END</li>
<li>pread/pwrite: lseek+read/write</li>
</ul>


<h3>dup/dup2</h3>

<ul>
<li>dup(fd): fcntl(fd, O_DUPFD, 0)</li>
<li>dup2(fd1, fd2): close(fd2);fcntl(fd1, O_DUPFD, fd2)</li>
</ul>


<h3>fcntl</h3>

<ul>
<li>F_DUPFD</li>
<li>F_GETFD/F_SETFD(file descriptor, FD_CLOEXEC only)</li>
<li>F_GETFL/F_SETFL(file status, O_NONBLOCK and so on)</li>
<li>F_GETOWN/F_SETOWN</li>
<li>F_GETLK/F_SETLK/F_SETLKW</li>
<li>ioctl(driver, no need to known)</li>
</ul>


<h2>Files and Directories</h2>

<h3>stat(file path)/fstat(file decriptor id)/lstat(show symbolic link)</h3>

<ul>
<li>st_mode(file type&amp;permission)</li>
<li>st_ino/st_dev/st_rdev</li>
<li>st_nlink</li>
<li>st_uid/st_gid</li>
<li>st_size</li>
<li>st_atime[ls -u] last access , read()</li>
<li>st_mtime[ls] last modify, write()</li>
<li>st_ctime[ls -c] last inode status chagne, chown()</li>
<li>st_blksize</li>
<li>st_blocks(number of disk block allocate)</li>
</ul>


<h3>File Type</h3>

<ul>
<li>Regular file(S_ISREG)</li>
<li>Directory file(S_ISDIR)</li>
<li>Block special file(S_ISBLK)</li>
<li>Character special file(S_ISCHR)</li>
<li>FIFO(S_ISFIFO)[named pipe]</li>
<li>Socket(S_ISSOCK)</li>
<li>Symbolic link(S_ISLNK)</li>
</ul>


<h3>IPC</h3>

<ul>
<li>MQ message queue</li>
<li>SEM semaphore</li>
<li>SHM shared memory object</li>
</ul>


<h3>Process uid/gid</h3>

<ul>
<li>real userID/groudID(who excute the process)</li>
<li>effective userID/groupID(the permisson check)[by default is real userID/groupID, use set-user-id to be the file owner]</li>
<li>saved set-user-ID/groud-ID(save the last effective when effective change)</li>
<li>supplement group IDs</li>
</ul>


<h3>File Access Permissions</h3>

<ul>
<li>R:4, W :2, X:1</li>
<li>S_I(R/W/X)(USR/GRP/OTH)</li>
<li>open file need X for directory(if you known this file, R is no need)</li>
<li>list file need R for directory</li>
<li>create/ delete file need W&amp;X for directory, W for file is no need</li>
<li>access(path, mode): access permission test</li>
<li>umask(cmask): set the access permission for file this process create, turn off the bit in cmask</li>
<li>fchmod(fd, mode)</li>
</ul>


<h3>chown/fchown/lchown</h3>

<ul>
<li>chwon(path,owner,group)</li>
<li>chown -R user:group file/directory</li>
</ul>


<h3>file system</h3>

<ul>
<li>driver/parition(one file system per partition)/cylinde/(inodes+blocks)</li>
<li>a inode is a file, point to many data block</li>
<li>a inode can be link from many directory, when not process open the file and all directory unlink, delete the inode, but the data block still exist[hard link, just add st_nlink, create hard link for directory is not allowed]</li>
<li>symbolic link: add a new inode point to source file path, no add st_nlink</li>
<li>link(oldpath,newpath), symlink(actualpath,sympath), unlink(path), remove(path), rename(old,new)</li>
<li>mkdir/rmdir/chdir/fchdir/getcwd</li>
<li>opendir/readdir/rewinddir/closedir/telldir/seekdir</li>
<li>DIR structure like FILE, with the offset</li>
<li>st_dev: major is the disk num, minor is the filesystem num</li>
<li>st_rdev: valid for character device &amp; block device, the real device it is on</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++类型转换笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/C%2B%2B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-22T21:19:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/C++类型转换笔记</id>
    <content type="html"><![CDATA[<h1>C语言默认</h1>

<ul>
<li>int(a)</li>
<li>(int)a</li>
</ul>


<h1>std::static_cast</h1>

<ul>
<li>效果同C语言默认</li>
<li>派生类向上转换为基类（安全）</li>
<li>基类向下转换为派生类（不安全，必须程序员保证）</li>
</ul>


<h1>std::dynamic_cast</h1>

<ul>
<li>基类向下转换为派生类（安全）</li>
<li>引用的话抛出std::bad_cast，指针返回空指针</li>
<li>运行时检查，依赖于虚函数表，基类必须有虚函数，效率比static_cast低</li>
</ul>


<h1>std::reinterpret_cast</h1>

<ul>
<li>把任意一个指针或算术类型转为任意其他指针或算术类型</li>
<li>一般只用于把指针转为int或int转为指针</li>
</ul>


<h1>std::const_cast</h1>

<ul>
<li>用来去掉变量的const/volatile属性</li>
</ul>


<h1>boost::polymorphic_cast</h1>

<ul>
<li>与dynamic_cast类型，但指针和引用转换失败都抛出std::bad_cast</li>
</ul>


<h1>boost::polymorphic_downcast</h1>

<ul>
<li>debug使用dynamic_cast，release使用static_cast</li>
<li>貌似能提高效率，但一般不要使用</li>
</ul>


<h1>boost::numeric_cast</h1>

<ul>
<li>用来防止较大的类型转成较小类型的数值回绕问题和有符号数转为无符号数的符号错误，失败抛出boost::bad_numeric_cast</li>
<li>doulbe转成float如果只是损失小数点精度的话不会抛出异常</li>
<li>sizeof(T)/std::numeric_limits<T>::max()获得类型的大小</li>
</ul>


<h1>boost::lexical_cast</h1>

<ul>
<li>把数值类型转为字符串类型 string a = boost::lexical_cast<string>(123)</li>
<li>把字符串类型转为数值类型 int a = boost::lexical_cast<int>(&ldquo;12&rdquo;)</li>
<li>失败抛出bad_lexical_cast</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutex&Lock笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/Mutex%26Lock%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-22T21:15:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/Mutex&Lock笔记</id>
    <content type="html"><![CDATA[<h1>Mutex</h1>

<h2>Eclusive Ownership</h2>

<ul>
<li>mutex，一个简单的mutex只能被锁住一次，假如同一线程试图两次锁定mutex，将会产生死锁。</li>
<li>recursive mutex，一个线程可以多次锁定一个mutex，但必须以同样的次数对mutex进行解锁，否则其他线程将无法锁定该mutex。</li>
<li>shared mutex，多个线程读，单个线程写，lock/shared_lock，使用一个unique_lock和一个shared_lock对一个shared_mutex操作可以实现读写锁</li>
</ul>


<h2>获取锁行为</h2>

<ul>
<li>等待并试图对mutex加锁，直到没有其他线程锁定mutex；</li>
<li>试图对mutex加锁，并立即返回，假如其他线程锁定了mutex；</li>
<li>等待并试图对mutex加锁，直到没有其他线程锁定mutex或者直到规定的时间已过。</li>
</ul>


<h2>分类</h2>

<ul>
<li>mutex(try_mutex)</li>
<li>timed_mutex</li>
<li>recursive_mutex</li>
<li>recursive_timed_mutex</li>
<li>shared_mutex</li>
</ul>


<h1>Lock</h1>

<h2>分类</h2>

<ul>
<li>lock_guard 利用RAII的最简单实现</li>
<li>unique_lock 在lock_guard的基础上提供了try_lock()/timed_lock</li>
<li>shared_lock 读写锁中的读锁</li>
<li>upgrade_lock  未明</li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_41_0/doc/html/thread/synchronization.html">Boost Synchronization</a></li>
<li><a href="http://zh.highscore.de/cpp/boost/multithreading.html">Boost多线程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Tip]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/cpp-tips/"/>
    <updated>2014-07-22T21:12:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/cpp-tips</id>
    <content type="html"><![CDATA[<h1>C++</h1>

<ul>
<li>虚函数是为了用基类指针能调用子类函数，虚函数必须有实现</li>
<li>纯虚函数是为了使类不能被实例化定义接口。纯虚函数只有声明</li>
<li>基类向下转型成派生类</li>
<li>定义构造函数、复制构造函数、或赋值操作符三个中的任意一个,你也需要定义另外两个</li>
<li>使用class a:private boost::non copyable</li>
<li>泛型是水平的，把各种不同的互相没有什么关系的类型应用于同一种算法；继承是垂直的，从抽象到具体，子类和父类是有关系的。</li>
</ul>


<h1>Linux</h1>

<ul>
<li>一个线程结束时要通过pthread_join或者pthread_detach(pthread_self())来释放8K左右的堆栈和线程描述符</li>
<li>interrupt只有在代码执行到wait/join/sleep这三种检查点的时候才会中断</li>
</ul>


<h1>Others</h1>

<ul>
<li>聚合：离散聚合/累积聚合/滑动聚合</li>
<li>旋转：开放架构(id/attr/val)与Cube</li>
<li>UnitTest:Setup/Exercice/Verify/Teardown</li>
<li>gtest事件：Enviroment(SetUp/TearDown)/TestSuite(SetUp/TearDownTestCase)/TestCase(SetUp/TearDown)</li>
</ul>

]]></content>
  </entry>
  
</feed>
