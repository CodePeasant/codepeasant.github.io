<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | 乌衣巷]]></title>
  <link href="http://CodePeasant.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://CodePeasant.github.io/"/>
  <updated>2014-08-22T21:20:39+08:00</updated>
  <id>http://CodePeasant.github.io/</id>
  <author>
    <name><![CDATA[吴逸翔]]></name>
    <email><![CDATA[1032197148@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++类型转换笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/C%2B%2B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-22T21:19:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/C++类型转换笔记</id>
    <content type="html"><![CDATA[<h1>C语言默认</h1>

<ul>
<li>int(a)</li>
<li>(int)a</li>
</ul>


<h1>std::static_cast</h1>

<ul>
<li>效果同C语言默认</li>
<li>派生类向上转换为基类（安全）</li>
<li>基类向下转换为派生类（不安全，必须程序员保证）</li>
</ul>


<h1>std::dynamic_cast</h1>

<ul>
<li>基类向下转换为派生类（安全）</li>
<li>引用的话抛出std::bad_cast，指针返回空指针</li>
<li>运行时检查，依赖于虚函数表，基类必须有虚函数，效率比static_cast低</li>
</ul>


<h1>std::reinterpret_cast</h1>

<ul>
<li>把任意一个指针或算术类型转为任意其他指针或算术类型</li>
<li>一般只用于把指针转为int或int转为指针</li>
</ul>


<h1>std::const_cast</h1>

<ul>
<li>用来去掉变量的const/volatile属性</li>
</ul>


<h1>boost::polymorphic_cast</h1>

<ul>
<li>与dynamic_cast类型，但指针和引用转换失败都抛出std::bad_cast</li>
</ul>


<h1>boost::polymorphic_downcast</h1>

<ul>
<li>debug使用dynamic_cast，release使用static_cast</li>
<li>貌似能提高效率，但一般不要使用</li>
</ul>


<h1>boost::numeric_cast</h1>

<ul>
<li>用来防止较大的类型转成较小类型的数值回绕问题和有符号数转为无符号数的符号错误，失败抛出boost::bad_numeric_cast</li>
<li>doulbe转成float如果只是损失小数点精度的话不会抛出异常</li>
<li>sizeof(T)/std::numeric_limits<T>::max()获得类型的大小</li>
</ul>


<h1>boost::lexical_cast</h1>

<ul>
<li>把数值类型转为字符串类型 string a = boost::lexical_cast<string>(123)</li>
<li>把字符串类型转为数值类型 int a = boost::lexical_cast<int>(&ldquo;12&rdquo;)</li>
<li>失败抛出bad_lexical_cast</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutex&Lock笔记]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/Mutex%26Lock%E7%AC%94%E8%AE%B0/"/>
    <updated>2014-07-22T21:15:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/Mutex&Lock笔记</id>
    <content type="html"><![CDATA[<h1>Mutex</h1>

<h2>Eclusive Ownership</h2>

<ul>
<li>mutex，一个简单的mutex只能被锁住一次，假如同一线程试图两次锁定mutex，将会产生死锁。</li>
<li>recursive mutex，一个线程可以多次锁定一个mutex，但必须以同样的次数对mutex进行解锁，否则其他线程将无法锁定该mutex。</li>
<li>shared mutex，多个线程读，单个线程写，lock/shared_lock，使用一个unique_lock和一个shared_lock对一个shared_mutex操作可以实现读写锁</li>
</ul>


<h2>获取锁行为</h2>

<ul>
<li>等待并试图对mutex加锁，直到没有其他线程锁定mutex；</li>
<li>试图对mutex加锁，并立即返回，假如其他线程锁定了mutex；</li>
<li>等待并试图对mutex加锁，直到没有其他线程锁定mutex或者直到规定的时间已过。</li>
</ul>


<h2>分类</h2>

<ul>
<li>mutex(try_mutex)</li>
<li>timed_mutex</li>
<li>recursive_mutex</li>
<li>recursive_timed_mutex</li>
<li>shared_mutex</li>
</ul>


<h1>Lock</h1>

<h2>分类</h2>

<ul>
<li>lock_guard 利用RAII的最简单实现</li>
<li>unique_lock 在lock_guard的基础上提供了try_lock()/timed_lock</li>
<li>shared_lock 读写锁中的读锁</li>
<li>upgrade_lock  未明</li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="http://www.boost.org/doc/libs/1_41_0/doc/html/thread/synchronization.html">Boost Synchronization</a></li>
<li><a href="http://zh.highscore.de/cpp/boost/multithreading.html">Boost多线程</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Tip]]></title>
    <link href="http://CodePeasant.github.io/blog/2014/07/22/cpp-tips/"/>
    <updated>2014-07-22T21:12:00+08:00</updated>
    <id>http://CodePeasant.github.io/blog/2014/07/22/cpp-tips</id>
    <content type="html"><![CDATA[<h1>C++</h1>

<ul>
<li>虚函数是为了用基类指针能调用子类函数，虚函数必须有实现</li>
<li>纯虚函数是为了使类不能被实例化定义接口。纯虚函数只有声明</li>
<li>基类向下转型成派生类</li>
<li>定义构造函数、复制构造函数、或赋值操作符三个中的任意一个,你也需要定义另外两个</li>
<li>使用class a:private boost::non copyable</li>
<li>泛型是水平的，把各种不同的互相没有什么关系的类型应用于同一种算法；继承是垂直的，从抽象到具体，子类和父类是有关系的。</li>
</ul>


<h1>Linux</h1>

<ul>
<li>一个线程结束时要通过pthread_join或者pthread_detach(pthread_self())来释放8K左右的堆栈和线程描述符</li>
<li>interrupt只有在代码执行到wait/join/sleep这三种检查点的时候才会中断</li>
</ul>


<h1>Others</h1>

<ul>
<li>聚合：离散聚合/累积聚合/滑动聚合</li>
<li>旋转：开放架构(id/attr/val)与Cube</li>
<li>UnitTest:Setup/Exercice/Verify/Teardown</li>
<li>gtest事件：Enviroment(SetUp/TearDown)/TestSuite(SetUp/TearDownTestCase)/TestCase(SetUp/TearDown)</li>
</ul>

]]></content>
  </entry>
  
</feed>
